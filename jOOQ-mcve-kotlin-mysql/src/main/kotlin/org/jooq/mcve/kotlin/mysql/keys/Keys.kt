/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.keys


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.mcve.kotlin.mysql.tables.Actor
import org.jooq.mcve.kotlin.mysql.tables.Film
import org.jooq.mcve.kotlin.mysql.tables.FilmActor
import org.jooq.mcve.kotlin.mysql.tables.Test
import org.jooq.mcve.kotlin.mysql.tables.records.ActorRecord
import org.jooq.mcve.kotlin.mysql.tables.records.FilmActorRecord
import org.jooq.mcve.kotlin.mysql.tables.records.FilmRecord
import org.jooq.mcve.kotlin.mysql.tables.records.TestRecord



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val KEY_ACTOR_PRIMARY: UniqueKey<ActorRecord> = Internal.createUniqueKey(Actor.ACTOR, DSL.name("KEY_actor_PRIMARY"), arrayOf(Actor.ACTOR.ACTOR_ID), true)
val KEY_FILM_PRIMARY: UniqueKey<FilmRecord> = Internal.createUniqueKey(Film.FILM, DSL.name("KEY_film_PRIMARY"), arrayOf(Film.FILM.FILM_ID), true)
val KEY_FILM_ACTOR_PRIMARY: UniqueKey<FilmActorRecord> = Internal.createUniqueKey(FilmActor.FILM_ACTOR, DSL.name("KEY_film_actor_PRIMARY"), arrayOf(FilmActor.FILM_ACTOR.ACTOR_ID, FilmActor.FILM_ACTOR.FILM_ID), true)
val KEY_TEST_PRIMARY: UniqueKey<TestRecord> = Internal.createUniqueKey(Test.TEST, DSL.name("KEY_test_PRIMARY"), arrayOf(Test.TEST.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val FK_FILM_ACTOR_ACTOR: ForeignKey<FilmActorRecord, ActorRecord> = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("fk_film_actor_actor"), arrayOf(FilmActor.FILM_ACTOR.ACTOR_ID), org.jooq.mcve.kotlin.mysql.keys.KEY_ACTOR_PRIMARY, arrayOf(Actor.ACTOR.ACTOR_ID), true)
val FK_FILM_ACTOR_FILM: ForeignKey<FilmActorRecord, FilmRecord> = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("fk_film_actor_film"), arrayOf(FilmActor.FILM_ACTOR.FILM_ID), org.jooq.mcve.kotlin.mysql.keys.KEY_FILM_PRIMARY, arrayOf(Film.FILM.FILM_ID), true)
